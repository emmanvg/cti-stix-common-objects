{
    "type": "bundle",
    "id": "bundle--36b2388a-7eb2-4705-9190-cc385bf153db",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--5c34ee53-d330-4706-ade7-5852c156bde3",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2022-06-14T00:57:33.46911Z",
            "modified": "2022-06-14T00:57:33.46911Z",
            "name": "CVE-2022-29247",
            "description": "Electron is a framework for writing cross-platform desktop applications using JavaScript (JS), HTML, and CSS. A vulnerability in versions prior to 18.0.0-beta.6, 17.2.0, 16.2.6, and 15.5.5 allows a renderer with JS execution to obtain access to a new renderer process with `nodeIntegrationInSubFrames` enabled which in turn allows effective access to `ipcRenderer`. The `nodeIntegrationInSubFrames` option does not implicitly grant Node.js access. Rather, it depends on the existing sandbox setting. If an application is sandboxed, then `nodeIntegrationInSubFrames` just gives access to the sandboxed renderer APIs, which include `ipcRenderer`. If the application then additionally exposes IPC messages without IPC `senderFrame` validation that perform privileged actions or return confidential data this access to `ipcRenderer` can in turn compromise your application / user even with the sandbox enabled. Electron versions 18.0.0-beta.6, 17.2.0, 16.2.6, and 15.5.5 contain a fix for this issue. As a workaround, ensure that all IPC message handlers appropriately validate `senderFrame`.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2022-29247"
                }
            ],
            "object_marking_refs": [
                "marking-definition--62fd3f9b-15f3-4ebc-802c-91fce9536bcf"
            ]
        }
    ]
}